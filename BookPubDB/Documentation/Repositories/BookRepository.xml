<?xml version="1.0" encoding="utf-8" ?>
<doc>
	<bookrepository>
		<!-- Class Summary -->
		<member name="T:BookPubDB.Repositories.BookRepository">
			<summary>
				Repository for handling CRUD operations related to the Book entity.
			</summary>
			<remarks>
				This class provides methods for creating, updating, retrieving, and deleting books.
				It extends from the generic Repository class, which contains common functionality.
			</remarks>
		</member>

		<!-- Method Summaries -->
		<member name="M:BookPubDB.Repositories.BookRepository.CreateAsync">
			<summary>
				Asynchronously creates a new Book in the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="data">The data to create a new book, serialized in JSON format.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the created Book object.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.BookRepository.DeleteAsync">
			<summary>
				Asynchronously deletes a Book by ID from the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the book to delete.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the deleted Book object or null if not found.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.BookRepository.Exists(System.Int32?)">
			<summary>
				Checks whether a Book exists in the database by its ID.
			</summary>
			<param name="id">The ID of the book to check.</param>
			<returns>A task that represents the asynchronous operation. The task result is true if the book exists, otherwise false.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.BookRepository.GetAllAsync">
			<summary>
				Asynchronously retrieves all Books from the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<returns>A task that represents the asynchronous operation. The task result is a list of all Books in the database.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.BookRepository.GetByIdAsync">
			<summary>
				Asynchronously retrieves a Book by its ID from the database, including its associated Author and Cover information.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the book to retrieve.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the Book object, or null if not found.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.BookRepository.UpdateAsync">
			<summary>
				Asynchronously updates an existing Book's information in the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the book to update.</param>
			<param name="itemDto">The updated data of the book, serialized in JSON format.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the updated Book object or null in case of failure.</returns>
		</member>
	</bookrepository>
</doc>
