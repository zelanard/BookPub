<?xml version="1.0" encoding="utf-8" ?>
<doc>
	<authorrepository>
		<!-- Class Summary -->
		<member name="T:BookPubDB.Repositories.AuthorRepository">
			<summary>
				Repository for handling CRUD operations related to the Author entity.
			</summary>
			<remarks>
				This class provides methods for creating, updating, retrieving, and deleting authors.
				It extends from the generic Repository class, which contains common functionality.
			</remarks>
		</member>

		<!-- Method Summaries -->
		<member name="M:BookPubDB.Repositories.AuthorRepository.CreateAsync">
			<summary>
				Asynchronously creates a new Author in the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="data">The data to create a new author, serialized in JSON format.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the created Author object.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.AuthorRepository.DeleteAsync">
			<summary>
				Asynchronously deletes an Author by ID from the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the author to delete.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the deleted Author object or null if not found.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.AuthorRepository.Exists">
			<summary>
				Checks whether an Author exists in the database by its ID.
			</summary>
			<param name="id">The ID of the author to check.</param>
			<returns>A task that represents the asynchronous operation. The task result is true if the author exists, otherwise false.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.AuthorRepository.GetAllAsync">
			<summary>
				Asynchronously retrieves all Authors from the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<returns>A task that represents the asynchronous operation. The task result is a list of all Authors in the database.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.AuthorRepository.GetByIdAsync">
			<summary>
				Asynchronously retrieves an Author by its ID from the database, including its associated Books.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the author to retrieve.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the Author object, or null if not found.</returns>
		</member>

		<member name="M:BookPubDB.Repositories.AuthorRepository.UpdateAsync">
			<summary>
				Asynchronously updates an existing Author's information in the database.
			</summary>
			<param name="context">The database context used to interact with the database.</param>
			<param name="id">The ID of the author to update.</param>
			<param name="itemDto">The updated data of the author, serialized in JSON format.</param>
			<returns>A task that represents the asynchronous operation. The task result contains the updated Author object or null in case of failure.</returns>
		</member>
	</authorrepository>
</doc>
